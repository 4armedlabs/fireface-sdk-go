// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// DecodedIdToken defines model for DecodedIdToken.
type DecodedIdToken struct {
	Email         *string `json:"email,omitempty"`
	EmailVerified *bool   `json:"email_verified,omitempty"`
	Exp           *int64  `json:"exp,omitempty"`
	Iat           *int64  `json:"iat,omitempty"`
	Iss           *string `json:"iss,omitempty"`
	Sub           *string `json:"sub,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt    int64   `json:"createdAt"`
	Email        string  `json:"email"`
	Id           *string `json:"id,omitempty"`
	PasswordHash *string `json:"passwordHash,omitempty"`
	UpdatedAt    int64   `json:"updatedAt"`
}

// UserToCreate defines model for UserToCreate.
type UserToCreate struct {
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
}

// UserToUpdate defines model for UserToUpdate.
type UserToUpdate struct {
	Password *string `json:"password,omitempty"`
}

// VerifyIdTokenRequest defines model for VerifyIdTokenRequest.
type VerifyIdTokenRequest struct {
	IdToken *string `json:"idToken,omitempty"`
}

// PostAuthUsersJSONRequestBody defines body for PostAuthUsers for application/json ContentType.
type PostAuthUsersJSONRequestBody = UserToCreate

// PutAuthUsersIdJSONRequestBody defines body for PutAuthUsersId for application/json ContentType.
type PutAuthUsersIdJSONRequestBody = UserToUpdate

// PostAuthVerifyIDTokenJSONRequestBody defines body for PostAuthVerifyIDToken for application/json ContentType.
type PostAuthVerifyIDTokenJSONRequestBody = VerifyIdTokenRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuthUsers request
	GetAuthUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthUsersWithBody request with any body
	PostAuthUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthUsers(ctx context.Context, body PostAuthUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthUsersId request
	DeleteAuthUsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthUsersId request
	GetAuthUsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAuthUsersIdWithBody request with any body
	PutAuthUsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAuthUsersId(ctx context.Context, id string, body PutAuthUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthVerifyIDTokenWithBody request with any body
	PostAuthVerifyIDTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthVerifyIDToken(ctx context.Context, body PostAuthVerifyIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuthUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthUsers(ctx context.Context, body PostAuthUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthUsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthUsersId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthUsersIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthUsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAuthUsersId(ctx context.Context, id string, body PutAuthUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAuthUsersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthVerifyIDTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthVerifyIDTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthVerifyIDToken(ctx context.Context, body PostAuthVerifyIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthVerifyIDTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthUsersRequest generates requests for GetAuthUsers
func NewGetAuthUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthUsersRequest calls the generic PostAuthUsers builder with application/json body
func NewPostAuthUsersRequest(server string, body PostAuthUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthUsersRequestWithBody generates requests for PostAuthUsers with any type of body
func NewPostAuthUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAuthUsersIdRequest generates requests for DeleteAuthUsersId
func NewDeleteAuthUsersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthUsersIdRequest generates requests for GetAuthUsersId
func NewGetAuthUsersIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAuthUsersIdRequest calls the generic PutAuthUsersId builder with application/json body
func NewPutAuthUsersIdRequest(server string, id string, body PutAuthUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAuthUsersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutAuthUsersIdRequestWithBody generates requests for PutAuthUsersId with any type of body
func NewPutAuthUsersIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthVerifyIDTokenRequest calls the generic PostAuthVerifyIDToken builder with application/json body
func NewPostAuthVerifyIDTokenRequest(server string, body PostAuthVerifyIDTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthVerifyIDTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthVerifyIDTokenRequestWithBody generates requests for PostAuthVerifyIDToken with any type of body
func NewPostAuthVerifyIDTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/verifyIDToken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuthUsersWithResponse request
	GetAuthUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthUsersResponse, error)

	// PostAuthUsersWithBodyWithResponse request with any body
	PostAuthUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthUsersResponse, error)

	PostAuthUsersWithResponse(ctx context.Context, body PostAuthUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthUsersResponse, error)

	// DeleteAuthUsersIdWithResponse request
	DeleteAuthUsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAuthUsersIdResponse, error)

	// GetAuthUsersIdWithResponse request
	GetAuthUsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAuthUsersIdResponse, error)

	// PutAuthUsersIdWithBodyWithResponse request with any body
	PutAuthUsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthUsersIdResponse, error)

	PutAuthUsersIdWithResponse(ctx context.Context, id string, body PutAuthUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthUsersIdResponse, error)

	// PostAuthVerifyIDTokenWithBodyWithResponse request with any body
	PostAuthVerifyIDTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthVerifyIDTokenResponse, error)

	PostAuthVerifyIDTokenWithResponse(ctx context.Context, body PostAuthVerifyIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthVerifyIDTokenResponse, error)
}

type GetAuthUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetAuthUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAuthUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetAuthUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAuthUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PutAuthUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAuthUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthVerifyIDTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DecodedIdToken
}

// Status returns HTTPResponse.Status
func (r PostAuthVerifyIDTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthVerifyIDTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthUsersWithResponse request returning *GetAuthUsersResponse
func (c *ClientWithResponses) GetAuthUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthUsersResponse, error) {
	rsp, err := c.GetAuthUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthUsersResponse(rsp)
}

// PostAuthUsersWithBodyWithResponse request with arbitrary body returning *PostAuthUsersResponse
func (c *ClientWithResponses) PostAuthUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthUsersResponse, error) {
	rsp, err := c.PostAuthUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthUsersResponse(rsp)
}

func (c *ClientWithResponses) PostAuthUsersWithResponse(ctx context.Context, body PostAuthUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthUsersResponse, error) {
	rsp, err := c.PostAuthUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthUsersResponse(rsp)
}

// DeleteAuthUsersIdWithResponse request returning *DeleteAuthUsersIdResponse
func (c *ClientWithResponses) DeleteAuthUsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAuthUsersIdResponse, error) {
	rsp, err := c.DeleteAuthUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthUsersIdResponse(rsp)
}

// GetAuthUsersIdWithResponse request returning *GetAuthUsersIdResponse
func (c *ClientWithResponses) GetAuthUsersIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAuthUsersIdResponse, error) {
	rsp, err := c.GetAuthUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthUsersIdResponse(rsp)
}

// PutAuthUsersIdWithBodyWithResponse request with arbitrary body returning *PutAuthUsersIdResponse
func (c *ClientWithResponses) PutAuthUsersIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAuthUsersIdResponse, error) {
	rsp, err := c.PutAuthUsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutAuthUsersIdWithResponse(ctx context.Context, id string, body PutAuthUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAuthUsersIdResponse, error) {
	rsp, err := c.PutAuthUsersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAuthUsersIdResponse(rsp)
}

// PostAuthVerifyIDTokenWithBodyWithResponse request with arbitrary body returning *PostAuthVerifyIDTokenResponse
func (c *ClientWithResponses) PostAuthVerifyIDTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthVerifyIDTokenResponse, error) {
	rsp, err := c.PostAuthVerifyIDTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthVerifyIDTokenResponse(rsp)
}

func (c *ClientWithResponses) PostAuthVerifyIDTokenWithResponse(ctx context.Context, body PostAuthVerifyIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthVerifyIDTokenResponse, error) {
	rsp, err := c.PostAuthVerifyIDToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthVerifyIDTokenResponse(rsp)
}

// ParseGetAuthUsersResponse parses an HTTP response from a GetAuthUsersWithResponse call
func ParseGetAuthUsersResponse(rsp *http.Response) (*GetAuthUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthUsersResponse parses an HTTP response from a PostAuthUsersWithResponse call
func ParsePostAuthUsersResponse(rsp *http.Response) (*PostAuthUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAuthUsersIdResponse parses an HTTP response from a DeleteAuthUsersIdWithResponse call
func ParseDeleteAuthUsersIdResponse(rsp *http.Response) (*DeleteAuthUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthUsersIdResponse parses an HTTP response from a GetAuthUsersIdWithResponse call
func ParseGetAuthUsersIdResponse(rsp *http.Response) (*GetAuthUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAuthUsersIdResponse parses an HTTP response from a PutAuthUsersIdWithResponse call
func ParsePutAuthUsersIdResponse(rsp *http.Response) (*PutAuthUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAuthUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthVerifyIDTokenResponse parses an HTTP response from a PostAuthVerifyIDTokenWithResponse call
func ParsePostAuthVerifyIDTokenResponse(rsp *http.Response) (*PostAuthVerifyIDTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthVerifyIDTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DecodedIdToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
